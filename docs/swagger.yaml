openapi: 3.0.2
info:
  title: Ops Catalog API
  description: "Ops Catalog API Specification\n\
    \ This API specification covers useful APIs which can be implemented on top of Ops Catalog data to share catalog information for other consumer apps.\n
    \ Links:\n- [Catalog](https://github.com/open-catalog-alliance/catalog)\n\
    - [Example Ops Catalog Spec](https://github.com/open-catalog-alliance/specification)"
  termsOfService: http://swagger.io/terms/
  contact:
    email: info@ops-catalog.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.2.1
externalDocs:
  description: Read the ops catalog specification
  url: http://open-catalog-alliance.github.io/specification/
servers:
  - url: http://localhost:8080
tags:
  - name: catalog
    description: Catalog Item
    externalDocs:
      description: Find out more
      url: http://open-catalog-alliance.github.io/specification/
  - name: user
    description: User and Team Information
    externalDocs:
      description: Find out more
      url: http://open-catalog-alliance.github.io/specification/

paths:
  /api/catalog:
    get:
      tags:
        - catalog
      summary: List and Filter Catalog Items
      description: List and Filter all catalog items by various query parameters
      operationId: searchCatalog
      parameters:
        - name: name
          in: query
          description: Name of the catalog item
          required: false
          explode: true
          schema:
            type: string
        - name: layer
          in: query
          description: Layer where the item belongs to
          required: false
        - name: tier
          in: query
          description: Application Tier
          required: false
          schema:
            type: string
        - name: team
          in: query
          description: Team responsible for the Catalog Item
          required: false
        - name: domain
          in: query
          description: Domain the Catalog Item belongs to
        - name: contact
          in: query
          description: Contact Address of the catalog item
          required: false
        - name: type
          in: query
          description: Type of Catalog Item
          required: false
        - name: language
          in: query
          description: Language the item was written in
          required: false


      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/CatalogItems'
        "400":
          description: Invalid Request
      security: []

  /api/templates:
    get:
      tags:
        - catalog
      summary: Returns available template names
      description: Returns all templates in the ops catalog
      operationId: getTemplates
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogItems'
      security: []

  /api/catalog/{id}:
    get:
      tags:
        - catalog
      summary: Find Catalog by Id
      description: "Lookup a single catalog item by id\
        \ Advisable not to bookmark the ID."
      operationId: getCatalogById
      parameters:
        - name: id
          in: path
          description: ID of catalog item
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCatalogItem'
        "400":
          description: Invalid id value
      security: []

  /api/catalog-names:
    get:
      tags:
        - catalog
      summary: Returns names of catalog items
      description: Returns the names of all catalog items
      operationId: getCatalogNames
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
      security: []


  /api/catalog-summary:
    get:
      tags:
        - catalog
      summary: Catalog Items with key attributes
      description: Catalog Item objects are transformed to return key attributes only.
        All search filters apply.
      operationId: getCatalogSummary
      parameters: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CatalogSummary'
        "400":
          description: Invalid Request


  /api/licenses:
    get:
      tags:
        - catalog
      summary: Returns applicable licenses
      description: Returns list of catalog items along with their license data
      operationId: getLicenses
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/License'
      security: []


  /api/domains:
    get:
      tags:
        - catalog
      summary: Returns domain names
      description: Returns all domains in the ops catalog
      operationId: getDomains
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains'
      security: []

  /api/user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'


  /api/user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

components:
  schemas:
    CatalogItem:
      type: object
      properties:
        id:
          type: string
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        classification:
          $ref: '#/components/schemas/Classification'
        dependencies:
          $ref: '#/components/schemas/Dependencies'
        audit:
          $ref: '#/components/schemas/Audit'

    Metadata:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string
        tier:
          type: string
        layer:
          type: string
        logo:
          type: string
        contact:
          type: string
        license:
          type: string

    Classification:
      type: object
      properties:
        type:
          type: string
        tag:
          type: array
          items:
            type: string
        domain:
          type: string
        team:
          type: string
        capability:
          type: string

    Dependencies:
      type: object
      properties:
        upstream:
          type: array
          items:
            type: string
        downstream:
          type: array
          items:
            type: string
        triggers:
          type: array
          items:
            type: string
        providedBy:
          type: string

    Operation:
      type: object
      properties:
        name:
          type: string
        updated:
          type: string
          format: date-time
        description:
          type: string

    Audit:
      type: object
      properties:
        source:
          type: string
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'


    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag


    CatalogItems:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CatalogItem'

    DataCatalogItem:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CatalogItem'

    CatalogSummary:
      type: object
      properties:
        name:
          type: string
        team:
          type: string
        domain:
          type: string

    License:
      type: object
      properties:
        name:
          type: string
        team:
          type: string
        domain:
          type: string
        license:
          type: string

    Domains:
      type: object
      properties:
        data:
          type: array
          items:
            type: string


  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

  securitySchemes:
    app_oauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://okta.io/oauth/authorize
          scopes:
            write:catalog: modify catalog items
            read:catalog: read catalog items
    api_key:
      type: apiKey
      name: api_key
      in: header
